name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: storyshort_linux_amd64
            archive_ext: .tar.gz
            binary_extension: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: storyshort_windows_amd64
            archive_ext: .zip
            binary_extension: .exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: storyshort_darwin_amd64
            archive_ext: .tar.gz
            binary_extension: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: storyshort_darwin_arm64
            archive_ext: .tar.gz
            binary_extension: ""

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install fyne CLI
      run: go install fyne.io/tools/cmd/fyne@latest

    - name: Generate icon resource
      run: fyne bundle -o icon.go assets/icon.svg

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev xorg-dev libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        # Устанавливаем Xcode command line tools если нужно
        xcode-select --install 2>/dev/null || true

    - name: Set CGO environment for cross-compilation (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        echo "GOOS=${{ matrix.goos }}" >> $GITHUB_ENV
        echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV

    - name: Set CGO environment for cross-compilation (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "CGO_ENABLED=1" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GOOS=${{ matrix.goos }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GOARCH=${{ matrix.goarch }}" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Build binary (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        export CGO_LDFLAGS="-Wl,-no_warn_duplicate_libraries"
        go build -ldflags="-s -w" -o storyshort${{ matrix.binary_extension }}

    - name: Build binary (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        go build -ldflags="-s -w" -o storyshort${{ matrix.binary_extension }}

    - name: Build binary (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        go build -ldflags="-s -w" -o storyshort${{ matrix.binary_extension }}

    - name: Create archive (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        tar -czf ${{ matrix.artifact_name }}${{ matrix.archive_ext }} storyshort${{ matrix.binary_extension }}

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path storyshort${{ matrix.binary_extension }} -DestinationPath ${{ matrix.artifact_name }}${{ matrix.archive_ext }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}${{ matrix.archive_ext }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          storyshort_linux_amd64/storyshort_linux_amd64.tar.gz
          storyshort_windows_amd64/storyshort_windows_amd64.zip
          storyshort_darwin_amd64/storyshort_darwin_amd64.tar.gz
          storyshort_darwin_arm64/storyshort_darwin_arm64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}