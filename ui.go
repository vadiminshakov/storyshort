package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/charmbracelet/bubbles/progress"
	"github.com/charmbracelet/bubbles/spinner"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

type sessionState int

const (
	configView sessionState = iota
	setupView
	recordingView
	processingView
	completedView
)

type model struct {
	state      sessionState
	recorder   *AudioRecorder
	progress   progress.Model
	spinner    spinner.Model
	width      int
	height     int
	err        error
	audioFile  string
	summaryFile string
	title      string
	startTime  time.Time
	noAudioWarning bool
	config     *Config
	tokenInput string
}

type recordingStartMsg struct{}
type recordingStoppedMsg struct{ audioFile string }
type processingCompleteMsg struct{ summaryFile, title string }
type noAudioDataMsg struct{}
type configLoadedMsg struct{ config *Config }
type tokenSavedMsg struct{}
type errorMsg struct{ err error }

var (
	titleStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#FAFAFA")).
		Background(lipgloss.Color("#7D56F4")).
		Padding(0, 1)

	headerStyle = lipgloss.NewStyle().
		BorderStyle(lipgloss.NormalBorder()).
		BorderForeground(lipgloss.Color("240")).
		Padding(1, 2)

	statusStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#04B575")).
		Bold(true)

	errorStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#FF5F87")).
		Bold(true)

	infoStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#7C7C7C"))

	recordingStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#FF0000")).
		Bold(true)

	helpStyle = lipgloss.NewStyle().
		Foreground(lipgloss.Color("#626262")).
		Render
)

func initialModel() model {
	p := progress.New(progress.WithDefaultGradient())
	s := spinner.New()
	s.Spinner = spinner.Dot
	s.Style = lipgloss.NewStyle().Foreground(lipgloss.Color("205"))

	return model{
		state:    configView,
		recorder: &AudioRecorder{outputDir: "recordings"},
		progress: p,
		spinner:  s,
	}
}

func (m model) Init() tea.Cmd {
	return tea.Batch(
		m.spinner.Tick,
		m.loadConfig,
	)
}

func (m model) loadConfig() tea.Msg {
	config, err := loadConfig()
	if err != nil {
		return errorMsg{err}
	}
	return configLoadedMsg{config}
}

func (m model) saveToken() tea.Msg {
	m.config.OpenAIAPIKey = m.tokenInput
	if err := saveConfig(m.config); err != nil {
		return errorMsg{err}
	}
	return tokenSavedMsg{}
}

func (m model) initializeAndStartRecording() tea.Msg {
	if err := m.recorder.initializeAudio(); err != nil {
		return errorMsg{err}
	}
	
	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	if err := m.recorder.StartRecording(); err != nil {
		return errorMsg{err}
	}
	
	return recordingStartMsg{}
}

func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		m.width = msg.Width
		m.height = msg.Height
		m.progress.Width = msg.Width - 4
		return m, nil

	case tea.KeyMsg:
		switch m.state {
		case configView:
			// –¢–æ–ª—å–∫–æ –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞
			switch msg.Type {
			case tea.KeyEnter:
				if len(m.tokenInput) > 0 {
					return m, m.saveToken
				}
			case tea.KeyEsc, tea.KeyCtrlC:
				return m, tea.Quit
			case tea.KeyBackspace:
				if len(m.tokenInput) > 0 {
					m.tokenInput = m.tokenInput[:len(m.tokenInput)-1]
				}
			default:
				if msg.Type == tea.KeyRunes {
					m.tokenInput += string(msg.Runes)
				}
			}
		case setupView:
			// –í setup —ç–∫—Ä–∞–Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥
			if msg.String() == "ctrl+c" || msg.String() == "q" || msg.String() == "esc" {
				return m, tea.Quit
			}
		case recordingView:
			// –í –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Esc, q, Ctrl+C
			if msg.String() == "ctrl+c" || msg.String() == "q" || msg.String() == "esc" {
				return m, m.stopRecording
			}
		case processingView:
			// –í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–π—Ç–∏
			if msg.String() == "ctrl+c" {
				return m, tea.Quit
			}
		case completedView:
			// –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã—Ö–æ–¥ –∏–ª–∏ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
			if msg.String() == "q" || msg.String() == "ctrl+c" || msg.String() == "esc" {
				return m, tea.Quit
			}
			if msg.String() == "enter" || msg.String() == "r" {
				// –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
				m.state = setupView
				m.noAudioWarning = false
				m.err = nil
				return m, m.initializeAndStartRecording
			}
		}

	case recordingStartMsg:
		m.state = recordingView
		m.startTime = time.Now()
		return m, m.tickRecording()

	case recordingStoppedMsg:
		m.state = processingView
		m.audioFile = msg.audioFile
		return m, tea.Batch(
			m.spinner.Tick,
			m.processWithOpenAI,
		)

	case processingCompleteMsg:
		m.state = completedView
		m.summaryFile = msg.summaryFile
		m.title = msg.title
		return m, nil

	case configLoadedMsg:
		m.config = msg.config
		if m.config.HasValidToken() {
			// –¢–æ–∫–µ–Ω –µ—Å—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–∏—Å–∏
			m.state = setupView
			return m, m.initializeAndStartRecording
		} else {
			// –¢–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
			return m, nil
		}

	case tokenSavedMsg:
		// –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–∏—Å–∏
		m.state = setupView
		return m, m.initializeAndStartRecording

	case noAudioDataMsg:
		m.state = setupView
		m.noAudioWarning = true
		return m, tea.Tick(3*time.Second, func(t time.Time) tea.Msg {
			// –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
			return tea.KeyMsg{Type: tea.KeyRunes, Runes: []rune{'r'}}
		})

	case errorMsg:
		m.err = msg.err
		return m, nil

	case spinner.TickMsg:
		var cmd tea.Cmd
		m.spinner, cmd = m.spinner.Update(msg)
		if m.state == processingView {
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–∏–∫–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
			return m, tea.Batch(cmd, m.spinner.Tick)
		}
		return m, cmd

	default:
		if m.state == recordingView {
			return m, m.tickRecording()
		}
		if m.state == processingView {
			return m, m.spinner.Tick
		}
	}

	return m, nil
}


func (m model) stopRecording() tea.Msg {
	if err := m.recorder.StopRecording(); err != nil {
		return errorMsg{err}
	}

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
	tempDir := "temp_recording"
	if err := os.MkdirAll(tempDir, 0755); err != nil {
		return errorMsg{err}
	}

	audioFile, err := m.recorder.SaveAudio(tempDir)
	if err != nil {
		if err.Error() == "no_audio_data" {
			return noAudioDataMsg{}
		}
		return errorMsg{err}
	}

	return recordingStoppedMsg{audioFile}
}

func (m model) processWithOpenAI() tea.Msg {
	summary, title, finalAudioPath, err := processWithOpenAI(m.audioFile, m.config.OpenAIAPIKey, m.recorder.outputDir, m.startTime)
	if err != nil {
		return errorMsg{err}
	}

	// –ü–æ–ª—É—á–∞–µ–º sessionDir –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
	sessionDir := filepath.Dir(finalAudioPath)
	summaryFile, err := saveSummary(title, summary, m.startTime, sessionDir)
	if err != nil {
		return errorMsg{err}
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
	os.RemoveAll("temp_recording")

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
	m.audioFile = finalAudioPath

	return processingCompleteMsg{summaryFile, title}
}

func (m model) tickRecording() tea.Cmd {
	return tea.Tick(time.Second, func(t time.Time) tea.Msg {
		return t
	})
}

func (m model) View() string {
	if m.err != nil {
		return errorStyle.Render("‚ùå –û—à–∏–±–∫–∞: " + m.err.Error())
	}

	switch m.state {
	case configView:
		return m.configView()
	case setupView:
		return m.setupView()
	case recordingView:
		return m.recordingView()
	case processingView:
		return m.processingView()
	case completedView:
		return m.completedView()
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
	}
}

func (m model) configView() string {
	title := titleStyle.Render("üîë OpenAI API –¢–æ–∫–µ–Ω")
	
	if m.config == nil {
		content := []string{
			title,
			"",
			fmt.Sprintf("%s –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", m.spinner.View()),
		}
		return headerStyle.Render(strings.Join(content, "\n"))
	}
	
	// –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞
	maskedToken := strings.Repeat("*", len(m.tokenInput))
	if len(m.tokenInput) == 0 {
		maskedToken = infoStyle.Render("–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω...")
	}
	
	content := []string{
		title,
		"",
		"–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º OpenAI API —Ç–æ–∫–µ–Ω:",
		"",
		fmt.Sprintf("–¢–æ–∫–µ–Ω: %s", maskedToken),
		"",
		infoStyle.Render("–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: https://platform.openai.com/api-keys"),
		infoStyle.Render("–°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: ~/.shortstory/config.json"),
		"",
		helpStyle("Enter - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Ä¢ Esc/Ctrl+C - –≤—ã–π—Ç–∏"),
	}
	
	return headerStyle.Render(strings.Join(content, "\n"))
}

func (m model) setupView() string {
	title := titleStyle.Render("üéôÔ∏è StoryShort Recorder")
	
	content := []string{
		title,
		"",
	}
	
	if m.noAudioWarning {
		content = append(content, infoStyle.Render("‚ÑπÔ∏è  –ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã."))
		content = append(content, infoStyle.Render("    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."))
		content = append(content, "")
	} else {
		content = append(content, "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø–∏—Å–∏...")
		content = append(content, "")
		content = append(content, "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:")
		content = append(content, "‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—É")
		content = append(content, "‚Ä¢ –ù–∞—á–Ω—ë—Ç –∑–∞–ø–∏—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
		content = append(content, "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å OpenAI")
		content = append(content, "")
		content = append(content, statusStyle.Render("‚ö° –ó–∞–ø—É—Å–∫..."))
		content = append(content, "")
	}
	
	content = append(content, helpStyle("Esc/q/Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞"))

	return headerStyle.Render(strings.Join(content, "\n"))
}

func (m model) recordingView() string {
	elapsed := time.Since(m.startTime)
	duration := fmt.Sprintf("%02d:%02d", 
		int(elapsed.Minutes()), 
		int(elapsed.Seconds())%60)

	audioSize := float64(len(m.recorder.audioData)) / 1024 / 1024 // MB

	title := titleStyle.Render("üéôÔ∏è –ó–∞–ø–∏—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
	
	content := []string{
		title,
		"",
		recordingStyle.Render("üî¥ REC"),
		"",
		fmt.Sprintf("‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s", duration),
		fmt.Sprintf("üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %.1f MB", audioSize),
		"",
		"–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ –∞—É–¥–∏–æ –≤—Å—Ç—Ä–µ—á–∏...",
		"",
		helpStyle("Esc/q/Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏"),
	}

	return headerStyle.Render(strings.Join(content, "\n"))
}

func (m model) processingView() string {
	title := titleStyle.Render("ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å OpenAI")
	
	content := []string{
		title,
		"",
		fmt.Sprintf("%s –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å...", m.spinner.View()),
		"",
		"üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper",
		"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–º–æ—â—å—é GPT-4",
		"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª",
		"",
		infoStyle.Render("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –∑–∞–ø–∏—Å–∏"),
		"",
		helpStyle("Ctrl+C - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥"),
	}

	return headerStyle.Render(strings.Join(content, "\n"))
}

func (m model) completedView() string {
	title := titleStyle.Render("‚ú® –ì–æ—Ç–æ–≤–æ!")
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ —Å–µ—Å—Å–∏–∏
	sessionName := filepath.Base(filepath.Dir(m.audioFile))
	
	content := []string{
		title,
		"",
		statusStyle.Render("üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!"),
		"",
		fmt.Sprintf("üìÅ –ü–∞–ø–∫–∞ —Å–µ—Å—Å–∏–∏: %s", sessionName),
		fmt.Sprintf("üìã –¢–µ–º–∞ –≤—Å—Ç—Ä–µ—á–∏: %s", m.title),
		"",
		"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã:",
		"  üéµ recording.wav - –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å",
		"  üìÑ transcript.txt - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è",
		"  üìù summary.txt - —Å–∞–º–º–∞—Ä–∏ –≤—Å—Ç—Ä–µ—á–∏",
		"",
		fmt.Sprintf("–ü—É—Ç—å: %s", infoStyle.Render("recordings/"+sessionName+"/")),
		"",
		helpStyle("Esc/q/Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞ ‚Ä¢ Enter/r –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"),
	}

	return headerStyle.Render(strings.Join(content, "\n"))
}

func runUI() error {
	p := tea.NewProgram(initialModel(), tea.WithAltScreen())
	_, err := p.Run()
	return err
}